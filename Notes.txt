L1 2020-09-01
------------------------

- Lab 2 & 3 are presented to a supervisor

L2 2020-09-04
------------------------
let & where synonyms

fun x = 
    let x' = abs x in
        x' + 5
fun x = x' + 5 where
    x' = abs x

L3B IO
------------------------

Pure functions make it hard to have randomness and reading from files, as all functions should return the same output for the same input

Type IO t to get around this: this package can have side-effects

IO String: Side effects, and return a string, IO Integer: Side effects, and return an integer

writeFile :: FilePath -> String -> IO ()
	IO (): function returns an instruction to the operating system
		(): Unit type (no return value, empty tuple, only a side effect)

Interaction with the outside world has to go through IO

Extract returned value from IO:
	s <- readFile "Hello.txt"
	NOT s = readfile (as this would be of type IO String, not string)
	<- binds the result of an instruction (or monad??)

do-notation:
	Combining instructions
	Has to __return__ an instruction with a result
		return :: a -> IO a

read :: Read a => String -> a

L4A - Test Data Generators
------------------------

QuickCheck needs to know how to generate random values (knows for several known types)

For some cases, we need to tell quickCheck how to generate random values
	- Your own data type
	- Custom restrictions on values 

functions can take instructions as arguments

A generic instruction is of type Monad
	It can have any type of return type 
	All can be built using Do-notation

Gen: A type of monad
	Instead of instructions to the OS, it gives instructions to QuickCheck!
	IO t: ghc runs the instruction, creates value of type t
	Gen t: QuickCheck library runs the instruction, creates random value of type t

	arbitrary :: Gen t 
		sample (arbitrary :: Gen t) will print out a sample of random values of type t

	If you have a Gen t in the type signature, QuickCheck will infer that arbitrary should be of type Gen t

	QuickCheck generates random values that go from small to big, not completely random (since it is made for testing)

listOf :: Gen a -> Gen [a]
	If you have a generator for random numbers, listOf will give you a generator for random lists of numbers

vectorOf :: Int -> Gen a -> Gen [a]
	Same as listOf, but with a fixed length (int)

choose :: Random a => (a, a) -> Gen a
	Pair (x, y) is a range between with values of type a must lie

elements :: [a] -> Gen a
	Takes a list of elements and generates random values from that list

oneof :: [Gen a] -> Gen a
	Chooses one of a list of generators (useful if you want to combine generators into a single instance of abritrary)

collect 
	Gives you information about the generated values (if you want to see the percentages of what values are being generated in the testing)

frequency :: [(Int, Gen a)] -> Gen a
	If you want to adjust the distribution of values. The Int is the relative frequency of that generator being used. [(5, r1), (3, r2)]: 5:3 ratio of choosing r1 over r2

Class Arbitrary
	QuickCheck can generate anything of the class Arbitrary
		Need to make your data type an instace of Arbitrary
	basically: 
		rType :: Gen Type
		rType = elements [...]
	Instance Arbitrary Type where
		arbitrary = rType

		abritrary can be defined with a do-block that combines instructions, ending in a return

L4B - Higher Order Functions
------------------------

Functions are First-class citizens:
	Anything that can be done in the language can also be done with functions (used as parameters, returned from other functions, stored in data...)

map:
	map :: (a -> b) -> [a] -> [b]
	Applies function from a to b on a list of a's, returns a list of b's

foldr:
	foldr f b []     = b
	foldr f b (x:xs) = f x (foldr f b xs)

	b is the base case

	foldr :: (a -> b -> b) -> b -> [a] -> b

filter: 
	filter :: (a -> Bool) -> [a] -> [a]

Partial application:
	You only give parts of the parameters of a function, and it will return a function that takes the rest of the parameters
		:t take 2 :: [a] -> [a]
			the missing parameter is a list, and the return value will be a list of take 2 list
	Instead of complaining that you didn't give it enough parameters, it returns a function that expects the rest. If it still doesn't get it, it will complain.

Lambda-expressions:
	Syntax:
		f = \a b c -> a^2 + b + c^2
	start with \ to denote lambda, -> is delimiter between lhs and rhs, rhs will be returned
	f will return a function that takes a b c and returns rhs.

L5A - More HO Functions
------------------------

Function Composition
	Just like in math: (f . g) x = f(g x)

Returning functions
	Int -> Int -> Int
	Int -> (Int -> Int)
	Equivalent type declarations. That is why partial application works: giving only the first Int will return a function that expects the second
	(Int -> Int) -> Int is NOT the same

Currying
	
Eta conversion
	(Eta expansion) f x = g x <=> f = g (Eta reduction)

L5B - Recursive Data Types
------------------------
Circular definitions don't work too well on numbers.

Circular definitions on lists work in Haskell, because of Lazy Evaluation.

$: function application operator
	$ :: (a -> b) -> a -> b
	Lowest priority in evaluation of all operators
		The things on its right are evaluated and can be treated as a single arguments (replaces parentheses)

Constructor functions: ways of building a data type with data, will expect data and a reference to itself if recursive
	data Hand = Empty | Add Card Hand
		Add: constructor
		Card: data
		Hand: itself

L6B - Recursive Data Types
------------------------
When pattern-matching, you can write something like:
	f e@(Cons x y) = ... e
	instead of
	f (Cons x y) = ... (Cons x y)
	to get a reference to the entire thing, and not have to write it out over and over again!
